# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: docenter-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage}
  region: eu-west-2
  apiGateway:
    shouldStartNameWithService: true

  # you can overwrite defaults here
  #  stage: dev
  # f: eu-west-2

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan*
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-apis${self:provider.stage}
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

  # you can define service wide environment variables here
  environment:
    DYNAMODB_APIS_TABLE: ${self:service}-apis-${self:provider.stage}

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

plugins:
  - serverless-pseudo-parameters
  - serverless-offline

functions:
  hello:
    name: ${self:service}-hello-${self:provider.stage}
    handler: handler.hello
    vpc:
      securityGroupIds: ${self:custom.securityGroups.${self:provider.stage}}
      subnetIds: ${self:custom.subnets.${self:provider.stage}}
    events:
      - http:
          path: /v1/hello
          method: get
  createAPI:
    name: ${self:service}-createAPI-${self:provider.stage}
    handler: handler.createAPI
    vpc:
      securityGroupIds: ${self:custom.securityGroups.${self:provider.stage}}
      subnetIds: ${self:custom.subnets.${self:provider.stage}}
    events:
      - http:
          path: /v1/apis
          method: post
  listAPIs:
    name: ${self:service}-listAPIs-${self:provider.stage}
    handler: handler.listAPIs
    vpc:
      securityGroupIds: ${self:custom.securityGroups.${self:provider.stage}}
      subnetIds: ${self:custom.subnets.${self:provider.stage}}
    events:
      - http:
          path: /v1/apis
          method: get
  getAPI:
    name: ${self:service}-getAPI-${self:provider.stage}
    handler: handler.getAPI
    vpc:
      securityGroupIds: ${self:custom.securityGroups.${self:provider.stage}}
      subnetIds: ${self:custom.subnets.${self:provider.stage}}
    events:
      - http:
          path: /v1/apis/{id}
          method: get
  patchAPI:
    name: ${self:service}-patchAPI-${self:provider.stage}
    handler: handler.patchAPI
    vpc:
      securityGroupIds: ${self:custom.securityGroups.${self:provider.stage}}
      subnetIds: ${self:custom.subnets.${self:provider.stage}}
    events:
      - http:
          path: /v1/apis/{id}
          method: patch
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    apisTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-apis-${opt:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
custom:
  securityGroups:
    staging:
      - sg-0166cbf56b7e77af0
    production:
      - sg-04b71cc889c5790e7
  subnets:
    staging:
      - subnet-06d3de1bd9181b0d7
      - subnet-0ed7d7713d1127656
    production:
      - subnet-0b7b8fea07efabf34
      - subnet-01d3657f97a243261
