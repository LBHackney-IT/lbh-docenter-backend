service: docenter-backend
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  tracing:
    lambda: true
    apiGateway: true
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan*
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-apis${self:provider.stage}

  environment:
    DYNAMODB_APIS_TABLE: ${self:service}-apis-${self:provider.stage}

plugins:
  - serverless-pseudo-parameters
  - serverless-offline

functions:
  hello:
    name: ${self:service}-hello-${self:provider.stage}
    handler: handler.hello
    role: lambdaExecutionRole
    events:
      - http:
          path: /v1/hello
          method: get
          private: true
  createAPI:
    name: ${self:service}-createAPI-${self:provider.stage}
    handler: handler.createAPI
    role: lambdaExecutionRole
    events:
      - http:
          path: /v1/apis
          method: post
          private: true
  listAPIs:
    name: ${self:service}-listAPIs-${self:provider.stage}
    handler: handler.listAPIs
    role: lambdaExecutionRole
    events:
      - http:
          path: /v1/apis
          method: get
          private: true
  getAPI:
    name: ${self:service}-getAPI-${self:provider.stage}
    handler: handler.getAPI
    role: lambdaExecutionRole
    events:
      - http:
          path: /v1/apis/{id}
          method: get
          private: true
  patchAPI:
    name: ${self:service}-patchAPI-${self:provider.stage}
    handler: handler.patchAPI
    role: lambdaExecutionRole
    events:
      - http:
          path: /v1/apis/{id}
          method: patch
          private: true
resources:
  Resources:
    apisTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-apis-${opt:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        Policies:
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    staging:
      securityGroupIds:
        - sg-04fa13c6d25c5f5cc
      subnetIds:
        - subnet-0ed7d7713d1127656
        - subnet-06d3de1bd9181b0d7
